/*
 * Andrew Lane
 * CS2550
 * SQL Assignment #5
 * 10/19/15
*/

--1
SELECT s.COURSE_NO, s.DESCRIPTION , s.COST
FROM COURSE s, SECTION z, INSTRUCTOR w
WHERE z.COURSE_NO = s.COURSE_NO AND z.INSTRUCTOR_ID = w.INSTRUCTOR_ID
AND w.FIRST_NAME = 'Charles' and w.LAST_NAME='Lowry'
ORDER BY s.COURSE_NO;

--2
SELECT MAX(s.NUMERIC_GRADE) AS NUMERIC_FINAL_GRADE 
FROM GRADE s INNER JOIN SECTION z
ON s.SECTION_ID = z.SECTION_ID
WHERE COURSE_NO = 130 AND s.GRADE_TYPE_CODE = 'FI'
GROUP BY s.GRADE_TYPE_CODE;

--3
SELECT s.FIRST_NAME,s.LAST_NAME, s.PHONE
FROM STUDENT s INNER JOIN ZIPCODE z
ON s.ZIP = z.ZIP
WHERE z.STATE = 'NY' AND z.CITY='New York'
ORDER BY s.LAST_NAME,s.FIRST_NAME;

--4
SELECT s.GRADE_TYPE_CODE, s.DESCRIPTION, e.NUMBER_PER_SECTION
FROM GRADE_TYPE s, GRADE_TYPE_WEIGHT e, SECTION z 
WHERE e.GRADE_TYPE_CODE = s.GRADE_TYPE_CODE AND e.SECTION_ID = z.SECTION_ID
AND z.COURSE_NO = 220
ORDER BY s.DESCRIPTION;

--5
SELECT s.STUDENT_ID, s.LAST_NAME ||', '|| s.FIRST_NAME AS STUDENT_NAME
FROM STUDENT s , GRADE z
WHERE s.STUDENT_ID = z.STUDENT_ID
GROUP BY s.FIRST_NAME, s.LAST_NAME, s.STUDENT_ID
HAVING AVG(z.NUMERIC_GRADE) < 80
ORDER BY s.LAST_NAME;

--6
SELECT s.Cost, COUNT(s.COURSE_NO) AS COURSES
FROM COURSE s
GROUP BY s.COST
HAVING COUNT(*) > 2
ORDER BY s.Cost;

--7
SELECT z.COURSE_NO, COUNT(s.ENROLL_DATE) AS ENROLLED
FROM SECTION z, ENROLLMENT s, COURSE w
WHERE z.SECTION_ID = s.SECTION_ID AND z.COURSE_NO = w.COURSE_NO
AND w.PREREQUISITE IS NULL
GROUP BY z.COURSE_NO
ORDER BY ENROLLED ASC;

--8
SELECT DISTINCT s.FIRST_NAME, s.LAST_NAME,  TO_CHAR(e.ENROLL_DATE, 'DD-MON-YYYY HH:MI AM') as ENROLL_DATE
FROM STUDENT s , ENROLLMENT e , ZIPCODE z
WHERE s.ZIP = z.ZIP AND s.STUDENT_ID = e.STUDENT_ID
AND z.CITY = 'Stamford' and z.STATE='CT'
AND e.ENROLL_DATE > TO_DATE('19-FEB-2007 10:20 AM', 'DD-MON-YYYY HH:MI AM')
ORDER BY s.LAST_NAME;

--9
SELECT z.COURSE_NO, c.DESCRIPTION
FROM GRADE_TYPE s, GRADE_TYPE_WEIGHT e, SECTION z, COURSE c
WHERE e.GRADE_TYPE_CODE = s.GRADE_TYPE_CODE AND e.SECTION_ID = z.SECTION_ID AND c.COURSE_NO = z.COURSE_NO
AND s.DESCRIPTION = 'Project'
ORDER BY z.COURSE_NO;

--10
SELECT s1.COURSE_NO,s1.PREREQUISITE,s2.DESCRIPTION
FROM COURSE s1 JOIN COURSE s2
ON s1.PREREQUISITE = s2.COURSE_NO
WHERE s1.COURSE_NO BETWEEN 300 AND 399
AND s1.PREREQUISITE IS NOT NULL
ORDER BY s1.COURSE_NO;